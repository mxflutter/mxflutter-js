import { MaterialColor } from './colors';
import { DataTableThemeData } from './data-table-theme';
import { TextSelectionThemeData } from './text-selection-theme';
import { OutlinedButtonThemeData } from './outlined-button-theme';
import { ElevatedButtonThemeData } from './elevated-button-theme';
import { TextButtonThemeData } from './text-button-theme';
import { TimePickerThemeData } from './time-picker-theme';
import { BottomNavigationBarThemeData } from './bottom-navigation-bar-theme';
import { ButtonBarThemeData } from './button-bar-theme';
import { DividerThemeData } from './divider-theme';
import { MaterialBannerThemeData } from './banner-theme';
import { PopupMenuThemeData } from './popup-menu-theme';
import { BottomSheetThemeData } from './bottom-sheet-theme';
import { CupertinoThemeData } from '../cupertino/theme';
import { Typography } from './typography';
import { NavigationRailThemeData } from './navigation-rail-theme';
import { FloatingActionButtonThemeData } from './floating-action-button-theme';
import { DialogTheme } from './dialog-theme';
import { SnackBarThemeData } from './snack-bar-theme';
import { ColorScheme } from './color-scheme';
import { BottomAppBarTheme } from './bottom-app-bar-theme';
import { AppBarTheme } from './app-bar-theme';
import { PageTransitionsTheme } from './page-transitions-theme';
import { TargetPlatform } from '../foundation/platform';
import { ChipThemeData } from './chip-theme';
import { CardTheme } from './card-theme';
import { TooltipThemeData } from './tooltip-theme';
import { TabBarTheme } from './tab-bar-theme';
import { SliderThemeData } from './slider-theme';
import { IconThemeData } from '../widgets/icon-theme-data';
import { InputDecorationTheme } from './input-decorator';
import { TextTheme } from './text-theme';
import { ToggleButtonsThemeData } from './toggle-buttons-theme';
import { ButtonThemeData } from './button-theme';
import { InteractiveInkFeatureFactory } from './ink-well';
import { Color, Brightness } from '../../../mx-dart-sdk';
import { MXDartClass } from '@mxflutter/mxflutter-base';
declare enum MaterialTapTargetSize {
    padded = "{ \"_name\": \"MaterialTapTargetSize.padded\", \"index\": 0 }",
    shrinkWrap = "{ \"_name\": \"MaterialTapTargetSize.shrinkWrap\", \"index\": 1 }"
}
export { MaterialTapTargetSize };
declare class ThemeData extends MXDartClass {
    visualDensity: VisualDensity;
    primaryColor: Color;
    primaryColorBrightness: Brightness;
    primaryColorLight: Color;
    primaryColorDark: Color;
    canvasColor: Color;
    shadowColor: Color;
    accentColor: Color;
    accentColorBrightness: Brightness;
    scaffoldBackgroundColor: Color;
    bottomAppBarColor: Color;
    cardColor: Color;
    dividerColor: Color;
    focusColor: Color;
    hoverColor: Color;
    highlightColor: Color;
    splashColor: Color;
    splashFactory: InteractiveInkFeatureFactory;
    selectedRowColor: Color;
    unselectedWidgetColor: Color;
    disabledColor: Color;
    buttonTheme: ButtonThemeData;
    toggleButtonsTheme: ToggleButtonsThemeData;
    buttonColor: Color;
    secondaryHeaderColor: Color;
    textSelectionColor: Color;
    cursorColor: Color;
    textSelectionHandleColor: Color;
    backgroundColor: Color;
    dialogBackgroundColor: Color;
    indicatorColor: Color;
    hintColor: Color;
    errorColor: Color;
    toggleableActiveColor: Color;
    textTheme: TextTheme;
    primaryTextTheme: TextTheme;
    accentTextTheme: TextTheme;
    inputDecorationTheme: InputDecorationTheme;
    iconTheme: IconThemeData;
    primaryIconTheme: IconThemeData;
    accentIconTheme: IconThemeData;
    sliderTheme: SliderThemeData;
    tabBarTheme: TabBarTheme;
    tooltipTheme: TooltipThemeData;
    cardTheme: CardTheme;
    chipTheme: ChipThemeData;
    platform: TargetPlatform;
    materialTapTargetSize: MaterialTapTargetSize;
    applyElevationOverlayColor: boolean;
    pageTransitionsTheme: PageTransitionsTheme;
    appBarTheme: AppBarTheme;
    bottomAppBarTheme: BottomAppBarTheme;
    colorScheme: ColorScheme;
    snackBarTheme: SnackBarThemeData;
    dialogTheme: DialogTheme;
    floatingActionButtonTheme: FloatingActionButtonThemeData;
    navigationRailTheme: NavigationRailThemeData;
    typography: Typography;
    cupertinoOverrideTheme: CupertinoThemeData;
    bottomSheetTheme: BottomSheetThemeData;
    popupMenuTheme: PopupMenuThemeData;
    bannerTheme: MaterialBannerThemeData;
    dividerTheme: DividerThemeData;
    buttonBarTheme: ButtonBarThemeData;
    bottomNavigationBarTheme: BottomNavigationBarThemeData;
    timePickerTheme: TimePickerThemeData;
    textButtonTheme: TextButtonThemeData;
    elevatedButtonTheme: ElevatedButtonThemeData;
    outlinedButtonTheme: OutlinedButtonThemeData;
    textSelectionTheme: TextSelectionThemeData;
    dataTableTheme: DataTableThemeData;
    fixTextFieldOutlineLabel: boolean;
    useTextSelectionTheme: boolean;
    constructor(namedParameters?: {
        brightness?: Brightness;
        visualDensity?: VisualDensity;
        primarySwatch?: MaterialColor;
        primaryColor?: Color;
        primaryColorBrightness?: Brightness;
        primaryColorLight?: Color;
        primaryColorDark?: Color;
        accentColor?: Color;
        accentColorBrightness?: Brightness;
        canvasColor?: Color;
        shadowColor?: Color;
        scaffoldBackgroundColor?: Color;
        bottomAppBarColor?: Color;
        cardColor?: Color;
        dividerColor?: Color;
        focusColor?: Color;
        hoverColor?: Color;
        highlightColor?: Color;
        splashColor?: Color;
        splashFactory?: InteractiveInkFeatureFactory;
        selectedRowColor?: Color;
        unselectedWidgetColor?: Color;
        disabledColor?: Color;
        buttonColor?: Color;
        buttonTheme?: ButtonThemeData;
        toggleButtonsTheme?: ToggleButtonsThemeData;
        secondaryHeaderColor?: Color;
        textSelectionColor?: Color;
        cursorColor?: Color;
        textSelectionHandleColor?: Color;
        backgroundColor?: Color;
        dialogBackgroundColor?: Color;
        indicatorColor?: Color;
        hintColor?: Color;
        errorColor?: Color;
        toggleableActiveColor?: Color;
        fontFamily?: string;
        textTheme?: TextTheme;
        primaryTextTheme?: TextTheme;
        accentTextTheme?: TextTheme;
        inputDecorationTheme?: InputDecorationTheme;
        iconTheme?: IconThemeData;
        primaryIconTheme?: IconThemeData;
        accentIconTheme?: IconThemeData;
        sliderTheme?: SliderThemeData;
        tabBarTheme?: TabBarTheme;
        tooltipTheme?: TooltipThemeData;
        cardTheme?: CardTheme;
        chipTheme?: ChipThemeData;
        platform?: TargetPlatform;
        materialTapTargetSize?: MaterialTapTargetSize;
        applyElevationOverlayColor?: boolean;
        pageTransitionsTheme?: PageTransitionsTheme;
        appBarTheme?: AppBarTheme;
        bottomAppBarTheme?: BottomAppBarTheme;
        colorScheme?: ColorScheme;
        dialogTheme?: DialogTheme;
        floatingActionButtonTheme?: FloatingActionButtonThemeData;
        navigationRailTheme?: NavigationRailThemeData;
        typography?: Typography;
        cupertinoOverrideTheme?: CupertinoThemeData;
        snackBarTheme?: SnackBarThemeData;
        bottomSheetTheme?: BottomSheetThemeData;
        popupMenuTheme?: PopupMenuThemeData;
        bannerTheme?: MaterialBannerThemeData;
        dividerTheme?: DividerThemeData;
        buttonBarTheme?: ButtonBarThemeData;
        bottomNavigationBarTheme?: BottomNavigationBarThemeData;
        timePickerTheme?: TimePickerThemeData;
        textButtonTheme?: TextButtonThemeData;
        elevatedButtonTheme?: ElevatedButtonThemeData;
        outlinedButtonTheme?: OutlinedButtonThemeData;
        textSelectionTheme?: TextSelectionThemeData;
        dataTableTheme?: DataTableThemeData;
        fixTextFieldOutlineLabel?: boolean;
        useTextSelectionTheme?: boolean;
    });
    static from(namedParameters?: {
        colorScheme?: ColorScheme;
        textTheme?: TextTheme;
    }): ThemeData;
    static light(): ThemeData;
    static dark(): ThemeData;
    static fallback(): ThemeData;
    static raw(namedParameters?: {
        visualDensity?: VisualDensity;
        primaryColor?: Color;
        primaryColorBrightness?: Brightness;
        primaryColorLight?: Color;
        primaryColorDark?: Color;
        canvasColor?: Color;
        shadowColor?: Color;
        accentColor?: Color;
        accentColorBrightness?: Brightness;
        scaffoldBackgroundColor?: Color;
        bottomAppBarColor?: Color;
        cardColor?: Color;
        dividerColor?: Color;
        focusColor?: Color;
        hoverColor?: Color;
        highlightColor?: Color;
        splashColor?: Color;
        splashFactory?: InteractiveInkFeatureFactory;
        selectedRowColor?: Color;
        unselectedWidgetColor?: Color;
        disabledColor?: Color;
        buttonTheme?: ButtonThemeData;
        buttonColor?: Color;
        toggleButtonsTheme?: ToggleButtonsThemeData;
        secondaryHeaderColor?: Color;
        textSelectionColor?: Color;
        cursorColor?: Color;
        textSelectionHandleColor?: Color;
        backgroundColor?: Color;
        dialogBackgroundColor?: Color;
        indicatorColor?: Color;
        hintColor?: Color;
        errorColor?: Color;
        toggleableActiveColor?: Color;
        textTheme?: TextTheme;
        primaryTextTheme?: TextTheme;
        accentTextTheme?: TextTheme;
        inputDecorationTheme?: InputDecorationTheme;
        iconTheme?: IconThemeData;
        primaryIconTheme?: IconThemeData;
        accentIconTheme?: IconThemeData;
        sliderTheme?: SliderThemeData;
        tabBarTheme?: TabBarTheme;
        tooltipTheme?: TooltipThemeData;
        cardTheme?: CardTheme;
        chipTheme?: ChipThemeData;
        platform?: TargetPlatform;
        materialTapTargetSize?: MaterialTapTargetSize;
        applyElevationOverlayColor?: boolean;
        pageTransitionsTheme?: PageTransitionsTheme;
        appBarTheme?: AppBarTheme;
        bottomAppBarTheme?: BottomAppBarTheme;
        colorScheme?: ColorScheme;
        dialogTheme?: DialogTheme;
        floatingActionButtonTheme?: FloatingActionButtonThemeData;
        navigationRailTheme?: NavigationRailThemeData;
        typography?: Typography;
        cupertinoOverrideTheme?: CupertinoThemeData;
        snackBarTheme?: SnackBarThemeData;
        bottomSheetTheme?: BottomSheetThemeData;
        popupMenuTheme?: PopupMenuThemeData;
        bannerTheme?: MaterialBannerThemeData;
        dividerTheme?: DividerThemeData;
        buttonBarTheme?: ButtonBarThemeData;
        bottomNavigationBarTheme?: BottomNavigationBarThemeData;
        timePickerTheme?: TimePickerThemeData;
        textButtonTheme?: TextButtonThemeData;
        elevatedButtonTheme?: ElevatedButtonThemeData;
        outlinedButtonTheme?: OutlinedButtonThemeData;
        textSelectionTheme?: TextSelectionThemeData;
        dataTableTheme?: DataTableThemeData;
        fixTextFieldOutlineLabel?: boolean;
        useTextSelectionTheme?: boolean;
    }): ThemeData;
    static fromJson(mapObj: any): ThemeData;
}
export { ThemeData };
declare class MaterialBasedCupertinoThemeData extends CupertinoThemeData {
    materialTheme: ThemeData;
    cupertinoOverrideTheme: CupertinoThemeData;
    constructor(namedParameters?: {
        materialTheme?: ThemeData;
    });
}
export { MaterialBasedCupertinoThemeData };
declare class _IdentityThemeDataCacheKey extends MXDartClass {
    baseTheme: ThemeData;
    localTextGeometry: TextTheme;
    constructor(baseTheme?: ThemeData, localTextGeometry?: TextTheme);
}
export { _IdentityThemeDataCacheKey };
declare class _FifoCache extends MXDartClass {
    cache: Map<any, any>;
    maximumSize: number;
    constructor(_maximumSize?: number);
}
export { _FifoCache };
declare class VisualDensity extends MXDartClass {
    horizontal: number;
    vertical: number;
    constructor(namedParameters?: {
        horizontal?: number;
        vertical?: number;
    });
    static get minimumDensity(): number;
    static get maximumDensity(): number;
    static get standard(): VisualDensity;
    static get comfortable(): VisualDensity;
    static get compact(): VisualDensity;
}
export { VisualDensity };
