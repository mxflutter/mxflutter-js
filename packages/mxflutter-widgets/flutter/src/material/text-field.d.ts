import { RestorableTextEditingController } from '../widgets/restoration-properties';
import { Key } from '../foundation/key';
import { ScrollController } from '../widgets/scroll-controller';
import { ScrollPhysics } from '../widgets/scroll-physics';
import { MouseCursor } from '../rendering/mouse-cursor';
import { DragStartBehavior } from '../gestures/recognizer';
import { EdgeInsets } from '../painting/edge-insets';
import { TextAlignVertical } from '../painting/alignment';
import { TextAlign, TextDirection, Radius, Color, BoxHeightStyle, BoxWidthStyle, Brightness } from '../../../mx-dart-sdk';
import { StrutStyle } from '../painting/strut-style';
import { TextStyle } from '../painting/text-style';
import { TextInputType, TextInputAction, TextCapitalization, SmartDashesType, SmartQuotesType } from '../services/text-input';
import { InputDecoration } from './input-decorator';
import { FocusNode } from '../widgets/focus-manager';
import { TextEditingController, ToolbarOptions } from '../widgets/editable-text';
import { StatefulWidget, State, GlobalKey } from '../widgets/framework';
import { TextSelectionGestureDetectorBuilder } from '../widgets/text-selection';
declare class _TextFieldSelectionGestureDetectorBuilder extends TextSelectionGestureDetectorBuilder {
    state: _TextFieldState;
    constructor(namedParameters?: {
        state?: _TextFieldState;
    });
}
export { _TextFieldSelectionGestureDetectorBuilder };
declare class TextField extends StatefulWidget {
    controller: TextEditingController;
    focusNode: FocusNode;
    decoration: InputDecoration;
    keyboardType: TextInputType;
    textInputAction: TextInputAction;
    textCapitalization: TextCapitalization;
    style: TextStyle;
    strutStyle: StrutStyle;
    textAlign: TextAlign;
    textAlignVertical: TextAlignVertical;
    textDirection: TextDirection;
    autofocus: boolean;
    obscuringCharacter: string;
    obscureText: boolean;
    autocorrect: boolean;
    smartDashesType: SmartDashesType;
    smartQuotesType: SmartQuotesType;
    enableSuggestions: boolean;
    maxLines: number;
    minLines: number;
    expands: boolean;
    readOnly: boolean;
    toolbarOptions: ToolbarOptions;
    showCursor: boolean;
    maxLength: number;
    maxLengthEnforced: boolean;
    onChanged: any;
    onEditingComplete: any;
    onSubmitted: any;
    onAppPrivateCommand: any;
    inputFormatters: Array<any>;
    enabled: boolean;
    cursorWidth: number;
    cursorHeight: number;
    cursorRadius: Radius;
    cursorColor: Color;
    selectionHeightStyle: BoxHeightStyle;
    selectionWidthStyle: BoxWidthStyle;
    keyboardAppearance: Brightness;
    scrollPadding: EdgeInsets;
    enableInteractiveSelection: boolean;
    dragStartBehavior: DragStartBehavior;
    onTap: any;
    mouseCursor: MouseCursor;
    buildCounter: any;
    scrollPhysics: ScrollPhysics;
    scrollController: ScrollController;
    autofillHints: any;
    restorationId: string;
    constructor(namedParameters?: {
        key?: Key;
        controller?: TextEditingController;
        focusNode?: FocusNode;
        decoration?: InputDecoration;
        keyboardType?: TextInputType;
        textInputAction?: TextInputAction;
        textCapitalization?: TextCapitalization;
        style?: TextStyle;
        strutStyle?: StrutStyle;
        textAlign?: TextAlign;
        textAlignVertical?: TextAlignVertical;
        textDirection?: TextDirection;
        readOnly?: boolean;
        toolbarOptions?: ToolbarOptions;
        showCursor?: boolean;
        autofocus?: boolean;
        obscuringCharacter?: string;
        obscureText?: boolean;
        autocorrect?: boolean;
        smartDashesType?: SmartDashesType;
        smartQuotesType?: SmartQuotesType;
        enableSuggestions?: boolean;
        maxLines?: number;
        minLines?: number;
        expands?: boolean;
        maxLength?: number;
        maxLengthEnforced?: boolean;
        onChanged?: any;
        onEditingComplete?: any;
        onSubmitted?: any;
        onAppPrivateCommand?: any;
        inputFormatters?: Array<any>;
        enabled?: boolean;
        cursorWidth?: number;
        cursorHeight?: number;
        cursorRadius?: Radius;
        cursorColor?: Color;
        selectionHeightStyle?: BoxHeightStyle;
        selectionWidthStyle?: BoxWidthStyle;
        keyboardAppearance?: Brightness;
        scrollPadding?: EdgeInsets;
        dragStartBehavior?: DragStartBehavior;
        enableInteractiveSelection?: boolean;
        onTap?: any;
        mouseCursor?: MouseCursor;
        buildCounter?: any;
        scrollController?: ScrollController;
        scrollPhysics?: ScrollPhysics;
        autofillHints?: any;
        restorationId?: string;
    });
    static get noMaxLength(): number;
}
export { TextField };
declare class _TextFieldState extends State {
    controller: RestorableTextEditingController;
    focusNode: FocusNode;
    isHovering: boolean;
    showSelectionHandles: boolean;
    selectionGestureDetectorBuilder: _TextFieldSelectionGestureDetectorBuilder;
    forcePressEnabled: boolean;
    editableTextKey: GlobalKey;
}
export { _TextFieldState };
