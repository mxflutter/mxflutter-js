import { DisposableBuildContext } from './disposable-build-context';
import { ImageStream, ImageInfo, ImageChunkEvent, ImageStreamListener } from '../painting/image-stream';
import { AssetBundle } from '../services/asset-bundle';
import { Key } from '../foundation/key';
import { ImageRepeat } from '../painting/decoration-image';
import { AlignmentGeometry } from '../painting/alignment';
import { BoxFit } from '../painting/box-fit';
import { Color, FilterQuality, BlendMode, Rect } from '../../../mx-dart-sdk';
import { ImageProvider } from '../painting/image-provider';
import { StatefulWidget$, State$ } from './framework';
declare class Image extends StatefulWidget$ {
    image: ImageProvider;
    frameBuilder: any;
    loadingBuilder: any;
    errorBuilder: any;
    width: number;
    height: number;
    color: Color;
    filterQuality: FilterQuality;
    colorBlendMode: BlendMode;
    fit: BoxFit;
    alignment: AlignmentGeometry;
    repeat: ImageRepeat;
    centerSlice: Rect;
    matchTextDirection: boolean;
    gaplessPlayback: boolean;
    semanticLabel: string;
    excludeFromSemantics: boolean;
    isAntiAlias: boolean;
    constructor(namedParameters?: {
        key?: Key;
        image?: ImageProvider;
        frameBuilder?: any;
        loadingBuilder?: any;
        errorBuilder?: any;
        semanticLabel?: string;
        excludeFromSemantics?: boolean;
        width?: number;
        height?: number;
        color?: Color;
        colorBlendMode?: BlendMode;
        fit?: BoxFit;
        alignment?: AlignmentGeometry;
        repeat?: ImageRepeat;
        centerSlice?: Rect;
        matchTextDirection?: boolean;
        gaplessPlayback?: boolean;
        isAntiAlias?: boolean;
        filterQuality?: FilterQuality;
    });
    static network(src?: string, namedParameters?: {
        key?: Key;
        scale?: number;
        frameBuilder?: any;
        loadingBuilder?: any;
        errorBuilder?: any;
        semanticLabel?: string;
        excludeFromSemantics?: boolean;
        width?: number;
        height?: number;
        color?: Color;
        colorBlendMode?: BlendMode;
        fit?: BoxFit;
        alignment?: AlignmentGeometry;
        repeat?: ImageRepeat;
        centerSlice?: Rect;
        matchTextDirection?: boolean;
        gaplessPlayback?: boolean;
        filterQuality?: FilterQuality;
        isAntiAlias?: boolean;
        headers?: Map<any, any>;
        cacheWidth?: number;
        cacheHeight?: number;
    }): Image;
    static file(file?: any, namedParameters?: {
        key?: Key;
        scale?: number;
        frameBuilder?: any;
        errorBuilder?: any;
        semanticLabel?: string;
        excludeFromSemantics?: boolean;
        width?: number;
        height?: number;
        color?: Color;
        colorBlendMode?: BlendMode;
        fit?: BoxFit;
        alignment?: AlignmentGeometry;
        repeat?: ImageRepeat;
        centerSlice?: Rect;
        matchTextDirection?: boolean;
        gaplessPlayback?: boolean;
        isAntiAlias?: boolean;
        filterQuality?: FilterQuality;
        cacheWidth?: number;
        cacheHeight?: number;
    }): Image;
    static asset(name?: string, namedParameters?: {
        key?: Key;
        bundle?: AssetBundle;
        frameBuilder?: any;
        errorBuilder?: any;
        semanticLabel?: string;
        excludeFromSemantics?: boolean;
        scale?: number;
        width?: number;
        height?: number;
        color?: Color;
        colorBlendMode?: BlendMode;
        fit?: BoxFit;
        alignment?: AlignmentGeometry;
        repeat?: ImageRepeat;
        centerSlice?: Rect;
        matchTextDirection?: boolean;
        gaplessPlayback?: boolean;
        isAntiAlias?: boolean;
        __mx_package?: string;
        filterQuality?: FilterQuality;
        cacheWidth?: number;
        cacheHeight?: number;
    }): Image;
    static memory(bytes?: any, namedParameters?: {
        key?: Key;
        scale?: number;
        frameBuilder?: any;
        errorBuilder?: any;
        semanticLabel?: string;
        excludeFromSemantics?: boolean;
        width?: number;
        height?: number;
        color?: Color;
        colorBlendMode?: BlendMode;
        fit?: BoxFit;
        alignment?: AlignmentGeometry;
        repeat?: ImageRepeat;
        centerSlice?: Rect;
        matchTextDirection?: boolean;
        gaplessPlayback?: boolean;
        isAntiAlias?: boolean;
        filterQuality?: FilterQuality;
        cacheWidth?: number;
        cacheHeight?: number;
    }): Image;
}
export { Image };
declare class _ImageState extends State$ {
    imageStream: ImageStream;
    imageInfo: ImageInfo;
    loadingProgress: ImageChunkEvent;
    isListeningToStream: boolean;
    invertColors: boolean;
    frameNumber: number;
    wasSynchronouslyLoaded: boolean;
    scrollAwareContext: DisposableBuildContext;
    lastException: any;
    lastStack: any;
    imageStreamListener: ImageStreamListener;
}
export { _ImageState };
